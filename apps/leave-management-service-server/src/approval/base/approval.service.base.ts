/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Approval as PrismaApproval } from "@prisma/client";

export class ApprovalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ApprovalCountArgs, "select">): Promise<number> {
    return this.prisma.approval.count(args);
  }

  async approvals(
    args: Prisma.ApprovalFindManyArgs
  ): Promise<PrismaApproval[]> {
    return this.prisma.approval.findMany(args);
  }
  async approval(
    args: Prisma.ApprovalFindUniqueArgs
  ): Promise<PrismaApproval | null> {
    return this.prisma.approval.findUnique(args);
  }
  async createApproval(
    args: Prisma.ApprovalCreateArgs
  ): Promise<PrismaApproval> {
    return this.prisma.approval.create(args);
  }
  async updateApproval(
    args: Prisma.ApprovalUpdateArgs
  ): Promise<PrismaApproval> {
    return this.prisma.approval.update(args);
  }
  async deleteApproval(
    args: Prisma.ApprovalDeleteArgs
  ): Promise<PrismaApproval> {
    return this.prisma.approval.delete(args);
  }
}
