/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LeaveRequestService } from "../leaveRequest.service";
import { LeaveRequestCreateInput } from "./LeaveRequestCreateInput";
import { LeaveRequest } from "./LeaveRequest";
import { LeaveRequestFindManyArgs } from "./LeaveRequestFindManyArgs";
import { LeaveRequestWhereUniqueInput } from "./LeaveRequestWhereUniqueInput";
import { LeaveRequestUpdateInput } from "./LeaveRequestUpdateInput";

export class LeaveRequestControllerBase {
  constructor(protected readonly service: LeaveRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LeaveRequest })
  async createLeaveRequest(
    @common.Body() data: LeaveRequestCreateInput
  ): Promise<LeaveRequest> {
    return await this.service.createLeaveRequest({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LeaveRequest] })
  @ApiNestedQuery(LeaveRequestFindManyArgs)
  async leaveRequests(@common.Req() request: Request): Promise<LeaveRequest[]> {
    const args = plainToClass(LeaveRequestFindManyArgs, request.query);
    return this.service.leaveRequests({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LeaveRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async leaveRequest(
    @common.Param() params: LeaveRequestWhereUniqueInput
  ): Promise<LeaveRequest | null> {
    const result = await this.service.leaveRequest({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LeaveRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLeaveRequest(
    @common.Param() params: LeaveRequestWhereUniqueInput,
    @common.Body() data: LeaveRequestUpdateInput
  ): Promise<LeaveRequest | null> {
    try {
      return await this.service.updateLeaveRequest({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LeaveRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLeaveRequest(
    @common.Param() params: LeaveRequestWhereUniqueInput
  ): Promise<LeaveRequest | null> {
    try {
      return await this.service.deleteLeaveRequest({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
