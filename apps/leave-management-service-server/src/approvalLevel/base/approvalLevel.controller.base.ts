/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApprovalLevelService } from "../approvalLevel.service";
import { ApprovalLevelCreateInput } from "./ApprovalLevelCreateInput";
import { ApprovalLevel } from "./ApprovalLevel";
import { ApprovalLevelFindManyArgs } from "./ApprovalLevelFindManyArgs";
import { ApprovalLevelWhereUniqueInput } from "./ApprovalLevelWhereUniqueInput";
import { ApprovalLevelUpdateInput } from "./ApprovalLevelUpdateInput";

export class ApprovalLevelControllerBase {
  constructor(protected readonly service: ApprovalLevelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApprovalLevel })
  async createApprovalLevel(
    @common.Body() data: ApprovalLevelCreateInput
  ): Promise<ApprovalLevel> {
    return await this.service.createApprovalLevel({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApprovalLevel] })
  @ApiNestedQuery(ApprovalLevelFindManyArgs)
  async approvalLevels(
    @common.Req() request: Request
  ): Promise<ApprovalLevel[]> {
    const args = plainToClass(ApprovalLevelFindManyArgs, request.query);
    return this.service.approvalLevels({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApprovalLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async approvalLevel(
    @common.Param() params: ApprovalLevelWhereUniqueInput
  ): Promise<ApprovalLevel | null> {
    const result = await this.service.approvalLevel({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApprovalLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApprovalLevel(
    @common.Param() params: ApprovalLevelWhereUniqueInput,
    @common.Body() data: ApprovalLevelUpdateInput
  ): Promise<ApprovalLevel | null> {
    try {
      return await this.service.updateApprovalLevel({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApprovalLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApprovalLevel(
    @common.Param() params: ApprovalLevelWhereUniqueInput
  ): Promise<ApprovalLevel | null> {
    try {
      return await this.service.deleteApprovalLevel({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
