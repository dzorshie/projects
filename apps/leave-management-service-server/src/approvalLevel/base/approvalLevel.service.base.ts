/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ApprovalLevel as PrismaApprovalLevel } from "@prisma/client";

export class ApprovalLevelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApprovalLevelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.approvalLevel.count(args);
  }

  async approvalLevels(
    args: Prisma.ApprovalLevelFindManyArgs
  ): Promise<PrismaApprovalLevel[]> {
    return this.prisma.approvalLevel.findMany(args);
  }
  async approvalLevel(
    args: Prisma.ApprovalLevelFindUniqueArgs
  ): Promise<PrismaApprovalLevel | null> {
    return this.prisma.approvalLevel.findUnique(args);
  }
  async createApprovalLevel(
    args: Prisma.ApprovalLevelCreateArgs
  ): Promise<PrismaApprovalLevel> {
    return this.prisma.approvalLevel.create(args);
  }
  async updateApprovalLevel(
    args: Prisma.ApprovalLevelUpdateArgs
  ): Promise<PrismaApprovalLevel> {
    return this.prisma.approvalLevel.update(args);
  }
  async deleteApprovalLevel(
    args: Prisma.ApprovalLevelDeleteArgs
  ): Promise<PrismaApprovalLevel> {
    return this.prisma.approvalLevel.delete(args);
  }
}
