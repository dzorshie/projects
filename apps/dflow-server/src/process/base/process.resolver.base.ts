/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Process } from "./Process";
import { ProcessCountArgs } from "./ProcessCountArgs";
import { ProcessFindManyArgs } from "./ProcessFindManyArgs";
import { ProcessFindUniqueArgs } from "./ProcessFindUniqueArgs";
import { CreateProcessArgs } from "./CreateProcessArgs";
import { UpdateProcessArgs } from "./UpdateProcessArgs";
import { DeleteProcessArgs } from "./DeleteProcessArgs";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { ProcessService } from "../process.service";
@graphql.Resolver(() => Process)
export class ProcessResolverBase {
  constructor(protected readonly service: ProcessService) {}

  async _processesMeta(
    @graphql.Args() args: ProcessCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Process])
  async processes(
    @graphql.Args() args: ProcessFindManyArgs
  ): Promise<Process[]> {
    return this.service.processes(args);
  }

  @graphql.Query(() => Process, { nullable: true })
  async process(
    @graphql.Args() args: ProcessFindUniqueArgs
  ): Promise<Process | null> {
    const result = await this.service.process(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Process)
  async createProcess(
    @graphql.Args() args: CreateProcessArgs
  ): Promise<Process> {
    return await this.service.createProcess({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Process)
  async updateProcess(
    @graphql.Args() args: UpdateProcessArgs
  ): Promise<Process | null> {
    try {
      return await this.service.updateProcess({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Process)
  async deleteProcess(
    @graphql.Args() args: DeleteProcessArgs
  ): Promise<Process | null> {
    try {
      return await this.service.deleteProcess(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Task], { name: "tasks" })
  async findTasks(
    @graphql.Parent() parent: Process,
    @graphql.Args() args: TaskFindManyArgs
  ): Promise<Task[]> {
    const results = await this.service.findTasks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
